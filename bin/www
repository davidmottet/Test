'use strict';
const config = require('../config/config');

const web = require('../web');

const fs = require('fs');
const cluster = require('cluster');
const numCPUs = require('os').cpus().length;

const options = {
  key: fs.readFileSync(__dirname + '/key.pem'),
  cert: fs.readFileSync(__dirname + '/cert.pem')
};

if (process.env.NODE_ENV === 'prod') {
	if (cluster.isMaster) {
		console.log(`Server run at port : ${config.PORT.https}`);
		console.log(`Master ${process.pid} is running`);

		// Fork workers.
		for (let i = 0; i < numCPUs; i++) {
			cluster.fork();
		}

		cluster.on('exit', (_worker, _code, _signal) => {
			console.log(`worker ${_worker.process.pid} died`);
		});
	} else {
		// Workers can share any TCP connection
		// In this case it is an HTTP server
		if (config.PORT.http) {
			web.http.createServer((_req, _res) => {
				web.router(_req, _res);
			}).listen(config.PORT.http);
		}

		// In this case it is an HTTPS server
		if (config.PORT.https) {
			web.https.createServer(options, (_req, _res) => {
				web.router(_req, _res);
			}).listen(config.PORT.https);
		}

		console.log(`Worker ${process.pid} started`);
	}
} else {
	// In this case it is an HTTP server

	if (config.PORT.http) {
		console.log(`Server http run at port : ${config.PORT.http}`);
		web.http.createServer((_req, _res) => {
			web.router(_req, _res);
		}).listen(config.PORT.http);
	}

	// In this case it is an HTTPS server
	if (config.PORT.https) {
		console.log(`Server https run at port : ${config.PORT.https}`);
		web.https.createServer(options, (_req, _res) => {
			web.router(_req, _res);
		}).listen(config.PORT.https);
	}
}
