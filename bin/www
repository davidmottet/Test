'use strict';
const config = require('../config/config');

const web = require('../web');

const fs = require('fs');
const cluster = require('cluster');
const numCPUs = require('os').cpus().length;

const options = {
  key: fs.readFileSync(__dirname + '/key.pem'),
  cert: fs.readFileSync(__dirname + '/cert.pem')
};

if (process.env.NODE_ENV === 'prod') {
	if (cluster.isMaster) {
		console.log(`Server run at port : ${config.PORT.https || 8000}`);
		console.log(`Master ${process.pid} is running`);

		// Fork workers.
		for (let i = 0; i < numCPUs; i++) {
			cluster.fork();
		}

		cluster.on('exit', (worker, code, signal) => {
			console.log(`worker ${worker.process.pid} died`);
		});
	} else {
		// Workers can share any TCP connection
		// In this case it is an HTTP server
		// web.http.createServer((req, res) => {
		// 	res.writeHead(200);
		// 	res.end('hello world\n');
		// }).listen(config.PORT.http || 8000);

		web.https.createServer(options, (req, res) => {
			res.writeHead(200);
			res.end('hello world\n');
		}).listen(config.PORT.https || 8000);

		console.log(`Worker ${process.pid} started`);
	}
} else {
	console.log(`Server run at port : ${config.PORT.https || 8000}`);
	// web.http.createServer((req, res) => {
	// 	res.writeHead(200);
	// 	res.end('hello world\n');
	// }).listen(config.PORT.http || 8000);

	web.https.createServer(options, (req, res) => {
		res.writeHead(200);
		res.end('hello world\n');
	}).listen(config.PORT.https || 8000);
}
